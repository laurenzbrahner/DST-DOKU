# Datenvisualisierung

Mit den gewonnenen Erkenntnissen aus der Exploration können nun Visualisierungen erstellt werden. Ziel ist es, aus den gewonnen Erkenntnissen der Exploration visuell ansprechende und aussagekräftige Visualisierungen mit Altair zu erstellen.

## Grundlegendes Design

Um ein durchgehendes Design zu ermöglichen, habe ich zuerst Konfigurationsparameter für Altair Plots erstellt. Diese sind so gut wie gleich in den verschiedenen Diagrammtypen:
```{python} 

"""
.properties(
    title={'text': 'Beispiel', 'dy': -20},
    background='#F5F5F5',
    width=600,
    height=400
).configure_title(
    fontSize=25,
    anchor='start'
).configure_axis(
    labelFontSize=14,
    titleFontSize=20,
    titleColor='gray',
    labelColor='gray',
    titlePadding=12,
    grid=False
).configure_legend(
    titleFontSize=16,
    labelFontSize=14
).configure_view(
    strokeWidth=0,
).configure_axisX(
    labelAngle=0,
    titleAnchor='start'
).configure_axisY(
    titleAnchor='end'
)

"""
```

### Allgemeine Eigenschaften

- `.properties()`: Allgemeine Eigenschaften des Diagramms.
  - `title`: Legt den Titel des Diagramms fest. 
  - `dy`  definiert die vertikale Verschiebung 
  - `background`: Hintergrundfarbe des Diagramms.
  - `width`: Bestimmt die Breite des Diagramms in Pixeln. 
  - `height`: Bestimmt die Höhe des Diagramms in Pixeln.

### Titelkonfiguration

- `.configure_title()`: Anpassungen für den Diagrammtitel.
  - `fontSize`: Die Schriftgröße des Titels in Pixeln.
  - `anchor`: Die Ausrichtung des Titels.



### Achsenkonfiguration

- `.configure_axis()`: onfiguration für beide Achsen (X & Y).
  - `labelFontSize`: Schriftgröße der Achsenbeschriftungen.
  - `titleFontSize`: Schriftgröße des Achsentitels.
  - `titleColor` und `labelColor`: Die Farbe des Achsentitels und der Beschriftungen.
  - `titlePadding`: Der Abstand zwischen dem Achsentitel und den Achsenbeschriftungen. 
  - `grid`: Steuert die Anzeige des Netztes

### Legendenkonfiguration

- `.configure_legend()`: Passt das Aussehen der Legende an.
  - `titleFontSize`: Die Schriftgröße des Legendentitels. 
  - `labelFontSize`: Die Schriftgröße der Legendenbeschriftungen.

### Ansichtskonfiguration

- `.configure_view()`: Konfiguation der Ansicht.
  - `strokeWidth`: Die Breite des Rahmens um das Diagramm.

### Spezifische Achsenkonfigurationen

- `.configure_axisX()` und `.configure_axisY()`: Spezifische Konfigurationen für die X- und Y-Achse.
  - `labelAngle`: Der Winkel der Achsenbeschriftungen auf der X-Achse. `0`  bedeutet eine horizontale Ausrichtung.
  - `titleAnchor`: Die Ausrichtung des Achsentitels.

<br/>

  ***Beachte:*** Die Hintergrundfarbe, Schriftgröße und die width und height können in späteren Darstellungen in der quarto-Präsentation oder in dem Dashboard variieren.


## Barplots

Für die Erstellung von Barplots sind meiner Meinung nach die Anzahl der Songs nach Tonart und Keys geeignet, da man mit einem Barplot perfekt Unterschiede in verschiedenen Kategorien aufzeigen kann.

**Tonart:**

Dafür habe ich zuerst einen Barplot mit den zwei verschiedenen Tonarten auf der X-Achse erstellt. Um den Unterschied besser aufzuzeigen, habe ich die Skalierung auf der Y-Achse geändert und eine Linie auf der Höhe des Maximalwerts platziert. Das ganze habe ich mit der 'alt.layer()' Funktion erreicht, die die Linie und den Plot layert.

![Anzahl der Top-Songs nach Tonart](images/visualization_bar_plot_with_lines.png)

**Keys:**

Hierfür habe ich einen Barplot mit den verschiedenen Keys auf der X-Achse erstellt. Auch hier habe ich, um den Unterschied besser aufzuzeigen, die Skalierung auf der Y-Achse geändert. Außerdem habe ich wieder eine Linie durch den Maximalwert gezogen und eine gestrichelte Linie durch den Minimalwert. Um diese Linien und somit den Unterschied besser hervorzuheben, habe ich dem Barplot eine geringere opacity gegeben. Auch hier habe ich wieder mit 'alt.layer()' gearbeitet.

![Anzahl der Ø Streams nach Key](images/keys.png)


## Line-Chart

Ein Liniendiagramm ist ideal, um die Anzahl der Song-Veröffentlichungen pro Monat darzustellen, da es die zeitliche Entwicklung und Trends klar hervorhebt. Es ermöglicht ein einfaches Erkennen von Mustern, wie z.B. saisonale Schwankungen oder Trends.

Für die Erstellung dieses Diagramms habe ich zuerst die Release-Monate, die in dem Datensatz von 1 bis 12 angegeben waren, auf die Monatsabkürzungen gemapped. Diese stellen  die X-Achse dar, auf der Y-Achse war die Anzahl der veröffentlichten Songs in diesem Monat abgebildet.
Um die Unterschiede hervorzuheben, habe ich die Extremwerte mit Punkten und senkrechten gestrichelten Linien versehen. Dafür habe ich verschieden Plots erstellt und diese dann mit `alt.layer()` zusammengefügt.

![Anzahl der Veröffentlichungen nach Monat](images/monthly_realeses.png)


## Scatter-Plot

Ich habe mich für ein Streudiagramm entschieden, um die Beziehung zwischen Speechiness und der Anzahl der Streams darzustellen, weil dabei, Muster und Korrelationen zwischen diesen beiden Variablen zu erkennen sind. Dieser Plot veranschaulicht besonders gut, wie die Menge der gesprochenen Worte in einem Song (Speechiness) mit der Anzahl der erfolgreichen Songs, mit diesem Speechiness-Wert zusammenhängt.

Um diesen Scatter-Plot zu erstellen, habe ich zunächst die Daten nach der Speechiness gruppiert und die Anzahl der Songs für jeden Speechniess-Wert gezählt. Danach habe ich Songs, die mehr als 40% Speechiness haben, aussortiert, um den Fokus auf dem relevanten Bereich zu belassen.
Anschließend habe ich diese gefilterten Daten benutzt, um ein lineares Regressionsmodell zu trainieren (sklearn). Diese Vorhersage habe ich dann in einem DataFrame gespeichert.

Daraufhin habe ich mit Altair die Regressionslinie und den Scatter-Plot erstellt und diese wieder mit `alt.layer()` zusammengefügt. Um die Regressionslinie hervorzuheben, habe ich die opacity des Scatter-Plots angepasst.

![Beziehung zwischen Anzahl der Songs und der Speechiness](images/scatter_plot.png)


## Distribution-Plot

Ich habe mich dazu entschieden, die Anzahl der Songs pro Energie-Kategorie in einem Verteilungsdiagramm darzustellen, weil es mir ermöglicht, die Verteilung und die zentrale Tendenz der Daten auf einen Blick zu erfassen. So kann ich erkennen, in welchen Energiebereichen die meisten Songs veröffentlicht werden und eventuelle Ausreißer oder Trends sofort identifizieren.

Dafür habe ich zuerst die Energy-Werte gruppiert und von 0 bis 100 in 10 Kategorien aufgeteilt, mit der durchschnittlichen Anzahl der Songs pro Kategorie.
Daraufhin habe ich nun 2 Charts erstellt, ein Histogramm, welches das Ergebnis in 'Balkenform' angibt und ein Liniendiagramm mit dem Prop `interpolate='monotone'` für eine glatte Linie.

Diese beiden Plots habe ich wieder mit der `alt.layer()` Funktion zusammengefügt und dem Histogramm etwas weniger opacity gegeben, um die Linie etwas hervorzuheben.


![Ø Anzahl der Songs nach Energy](images/distribution.png)


## Map

Für die Map habe ich die **Geopandas** Bibliothek verwendet, die sich sehr gut für die Verarbeitung von geografischen Daten eignet.
Jedoch musste ich zuerst die von mir angereicherten Herkunftsländer in dem Datensatz mappen, da sie in der verwendeten Bibliothek zum Teil anders hießen.
Danach habe ich die Anzahl der Künstler pro Land gezählt und in einem DataFrame gespeichert. Dann wurden die Geopandas-Daten und mein DataFrame zusammengeführt, wobei die Anzahl der Künstler pro Land als zusätzliche Information hinzugefügt wurde.

Mit Altair habe ich dann eine Map erstelt, und die Länder entsprechend ihrer Künstler-Anzahl eingefärbt. Da es einen starken Ausreißer, die USA gab, habe ich eine logarithmische Skala verwendet, um die Unterschiede sichtbarer zu machen.

![Anzahl Top-Künstler nach Herkunftsland](images/map.png)


<br/>


**Nun hatte ich die grundlegenden Charts erstellt und ich konnte mit der Erstellung der Präsentation und des Dashboards beginnen.**



 