{
  "hash": "9cc60ccace7c4714bd2c284f494ca337",
  "result": {
    "markdown": "# Datenvisualisierung\n\nMit den gewonnen Erkenntnissen aus der Exploration, können nun Visualisierungen erstellt werden. Ziel ist es, aus den gewonnen Erkenntnissen der Exploration visuell ansprechende und aussagekräftige Visualisierungen mit Altair zu erstellen.\n\n## Grundelegendes Design\n\nUm ein durchgehendes Design zu ermöglichen habe ich zuerst Konfigurationsparameter für Altair Plots erstellt. Diese sind so gut wie gleich in den verschiedenen Diagrammtypen:\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\n\"\"\"\n.properties(\n    title={'text': 'Beispiel', 'dy': -20},\n    background='#F5F5F5',\n    width=600,\n    height=400\n).configure_title(\n    fontSize=25,\n    anchor='start'\n).configure_axis(\n    labelFontSize=14,\n    titleFontSize=20,\n    titleColor='gray',\n    labelColor='gray',\n    titlePadding=12,\n    grid=False\n).configure_legend(\n    titleFontSize=16,\n    labelFontSize=14\n).configure_view(\n    strokeWidth=0,\n).configure_axisX(\n    labelAngle=0,\n    titleAnchor='start'\n).configure_axisY(\n    titleAnchor='end'\n)\n\n\"\"\"\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\n\"\\n.properties(\\n    title={'text': 'Beispiel', 'dy': -20},\\n    background='#F5F5F5',\\n    width=600,\\n    height=400\\n).configure_title(\\n    fontSize=25,\\n    anchor='start'\\n).configure_axis(\\n    labelFontSize=14,\\n    titleFontSize=20,\\n    titleColor='gray',\\n    labelColor='gray',\\n    titlePadding=12,\\n    grid=False\\n).configure_legend(\\n    titleFontSize=16,\\n    labelFontSize=14\\n).configure_view(\\n    strokeWidth=0,\\n).configure_axisX(\\n    labelAngle=0,\\n    titleAnchor='start'\\n).configure_axisY(\\n    titleAnchor='end'\\n)\\n\\n\"\n```\n:::\n:::\n\n\n### Allgemeine Eigenschaften\n\n- `.properties()`: Allgemeine Eigenschaften des Diagramms.\n  - `title`: Legt den Titel des Diagramms fest. \n  - `dy`  definiert die vertikale Verschiebung \n  - `background`: Hintergrundfarbe des Diagramms.\n  - `width`: Bestimmt die Breite des Diagramms in Pixeln. \n  - `height`: Bestimmt die Höhe des Diagramms in Pixeln.\n\n### Titelkonfiguration\n\n- `.configure_title()`: Anapssungen für den Diagrammtitel.\n  - `fontSize`: Die Schriftgröße des Titels in Pixeln.\n  - `anchor`: Die Ausrichtung des Titels.\n\n\n\n### Achsenkonfiguration\n\n- `.configure_axis()`: konfiguration für beide Achsen (X & Y).\n  - `labelFontSize`: Schriftgröße der Achsenbeschriftungen.\n  - `titleFontSize`: Schriftgröße des Achsentitels.\n  - `titleColor` und `labelColor`: Die Farbe des Achsentitels und der Beschriftungen.\n  - `titlePadding`: Der Abstand zwischen dem Achsentitel und den Achsenbeschriftungen. \n  - `grid`: Steuert die Anzeige des Gitternetzes. `False` bedeutet, dass kein Gitternetz gezeigt wird.\n\n### Legendenkonfiguration\n\n- `.configure_legend()`: Passt das Aussehen der Legende an.\n  - `titleFontSize`: Die Schriftgröße des Legendentitels. \n  - `labelFontSize`: Die Schriftgröße der Legendenbeschriftungen.\n\n### Ansichtskonfiguration\n\n- `.configure_view()`: Konfiguation der Ansicht.\n  - `strokeWidth`: Die Breite des Rahmens um das Diagramm. `0` bedeutet, dass kein Rahmen gezeigt wird.\n\n### Spezifische Achsenkonfigurationen\n\n- `.configure_axisX()` und `.configure_axisY()`: Spezifische Konfigurationen für die X- und Y-Achse.\n  - `labelAngle`: Der Winkel der Achsenbeschriftungen auf der X-Achse. `0`  bedeutet eine horizontale Ausrichtung.\n  - `titleAnchor`: Die Ausrichtung des Achsentitels.\n\n<br/>\n\n  ***Beachte:*** Die Hintergrundfarbe, Schriftgröße und die width und height können in späteren Darstellungen in der quarto-Präsentation oder in dem Dashboard variieren.\n\n\n## Barplots\n\nFür die Erstellung von Barplots haben sich meiner Meinung nach die Anzahl der Songs nach Tonart und Keys geeignet. Da man mit einem Barplot perfekt unterschiede in verschiedenen Kategorieren aufzeigen kann. \n\n**Tonart:**\n\nDafür habe ich zuerst ein Barplot mit den zwei verschiedenen Tonarten auf der X-Achse Erstellt. Um den Unterschied besser aufzuzeigen, habe ich die Skalierung auf der Y-Achse geändert und eine Linie auf der Höhe des Maximalwerts plaziert. Das ganze habe ich mit der `alt.layer()` Funktion erreicht, die die Linie und den Plot layert.\n\n![Anzahl der Top-Songs nach Tonart](images/visualization_bar_plot_with_lines.png)\n\n**Keys:**\n\nHierfür habe ich einen Barplot mit den verschiedenen Keys auf der X-Achse erstellt. Auch hier habe ich um den Unterschied besser aufzuzeigen, die Skalierung auf der Y-Achse geändert. Außerdem habe ich wieder eine Linie durch den Maximalwert gezogen und eine gestrichelte Linie durch den Minimalwert. Um dieses Linien und somit den Unterschied besser hervorzuheben, habe ich dem Barplot eine geringere opacity gegeben. Auch hier habe ich wieder mit `alt.layer()` gearbeitet.\n\n![Anzahl der Ø Streams nach Key](images/keys.png)\n\n\n## Line-Chart\n\nEin Linendiagramms ist ideal um die Anzajl der Song-veröffentlichungen pro Monat darzustellen, daes die zeitliche Entwicklung und Trends klar hervorhebt. es ermöglicht ein einfaches Erkennen von Mustern, wie z.B. saisonale Schwankungen oder Trends. \n\nFür die Erstellung dieses Diagramms, habe ich zuerst die release-Monate, die in dem Datensatz von 1-12 angegeben waren, auf die Monatsabkürzungen gemapped. Diese stellten bei mir dann die X-Achse dar, auf der Y-Achse war die Anzahl der veröffentlichten Songs in diesem Monat.\nUm die Unterschiede hervorzuheben, habe ich die Extremwerte mit Puknten und senkrechten gestrichelten Linien versehen. Dafür  habe ich verschieden Plots erstellt und diese Dann mit `alt.layer()` zusammengefügt\n\n![Anzahl der Veröffentlichungen nach Monat](images/monthly_realeses.png)\n\n\n## Scatter-Plot\n\nIch habe mich für ein Streudiagramm entschieden, um die Beziehung zwischen Speechiness und der Anzahl der Streams darzustellen, weil es mir ermöglicht, Muster und Korrelationen zwischen diesen Beiden Variablen zu erkennen. Dieser Plot veranschaulicht besonders gut, wie die Menge der gesprochenen Worte in einem Song (Speechiness) mit der Anzahl der erfolgreichen Songs mit diesem Speechiness-Wert zusammenhängt.\n\nUm diesen Scatter-Plot zu erstellen, habe ich zunächst die Daten nach der Speechiness Gruppiert und die Anzahl der Songs für jeden Speechniess-Wert gezählt. Danach habe ich Songs welche über 40% Speechiness haben aussortiert, um den Fokus auf den relevanten Bereich zu belassen. \nAnschließend habe ich diese gefilterten Daten benutzt um ein Lineares Regressionsmodell zu trainieren (sklearn). Diese Vorhersage habe ich dann in einem DataFrame gespeichert.\n\nDaraufhin habe ich mit Altair die Regressionslinie und den Scatter-Plot erstellt und diese wieder mit `alt.layer()` zusammengefügt. Um die regressionsLinie Hervorzuheben, habe ich die opacity des Scatter-Plots angepasst.\n\n![Beziehung zwischen Anzahl der Songs und der Speechiness](images/scatter_plot.png)\n\n\n## Distribution-Plot\n\nIch habe mich dazu entschieden Die Anzahl der Songs pro Energy-Kategorie in einem Verteilungsdiagramm darzustellen, weil es mir ermöglicht, die Verteilung und die zentrale Tendenz der Daten auf einen Blick zu erfassen. So kann ich erkennen, in welchen Energiebereichen die meisten Songs veröffentlicht werden, und eventuelle Ausreißer oder Trends sofort identifizieren.\n\nDafür habe ich zuerst die Energy-Werte Gruppiert und von 0-100 in 10 Kategorien aufgeteilt, mit der durchschnittlichen Anzahl der Songs pro Kategorie. \nDaraufhin habe ich nun 2 Charts erstellt ein Histogramm, was das Ergebnis in 'Balkenform' angibt un ein LinienDiagramm mit dem Prop `interpolate='monotone'` für eine glatte Linie.\n\nDiese Beiden Plots habe ich wieder mit der `alt.layer()` funktion Zusammengefügt und dem Histogramm etwas weniger opacity gegeben um die Linie etwas hervorzuheben.\n\n\n![Ø Anzahl der Songs nach Energy](images/distribution.png)\n\n\n## Map\n\nFür die Map habe ich die **Geopandas** Bibliothek verwendet, die sich sehr gut für die Verarbeitung von geografischen Daten eignet.\nJedoch musste ich zuerst die von mir angereicherten Herkunftsländer in dem Datensatz mappen, da sie in der verwendeten Bibliothek zum Teil anders hießen.\nDanach habe ich die Anzahl der Künstler pro Land gezählt und in einem DataFrame gespeichert. Dann habe ich die Geopandas Daten und meinen DataFrame zusammegeführt, wobei ich die Anzahl der Künstler pro Land als zusätzlich Information hinzugefügt habe.\n\nMit Altair habe ich dann eine Map erstelt, und die Länder entsprechend ihrer Künstler-Anzahl eingefärbt. Da es einen Starken außreiser mit den USA gab, habe ich eine Logarithmische Skala verwendet um die Unterschiede Sichtbarer zu machen.\n\n![Anzahl Top-Künstler nach Herkunftsland](images/map.png)\n\n\n<br/>\n\n\n**Nun hatte ich die grundlegenden Charts erstellt und ich konnte mit der Erstellung der Präsentation und des Dashboards anfangen.**\n\n",
    "supporting": [
      "datenvisualisierung_files"
    ],
    "filters": [],
    "includes": {}
  }
}