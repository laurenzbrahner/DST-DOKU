# Streamlit Dashboard und Report

Um die Ergebnisse noch einmal detaillierter zu zeigen und Interaktivität zu ermöglichen, habe ich ein Dashboard erstellt. Dafür wurde das Streamlit Framework verwendet. Dieses ermöglicht eine schnelle und ziemlich intuitive Erstellung eines Dashboards.
Zusätzlich wurde Streamlit für die Erstellung des Reports verwendet.

## Design, Aufbau und Beschreibung der Funktionalität des Dashboards

An dem Design musste ich nicht viel ändern, da ein Streamlit Dashboard von Haus aus meiner Meinung nach ziemlich gut aussieht. Ich habe in den meisten Fällen nur das `layout` auf `wide` gesetzt, um mehrere Visualisierungen nebeneinander darstellen zu können. 
Außerdem wurde, wenn Charts in einem kurzen Text erklärt wurden, dieser Text mit derselben Farbe des Diagrammtitels versehen.

Für den Aufbau des Dashboards habe ich eine Multipage-App gewählt. In Streamlit ist dies relativ einfach. Die verschiedenen Dateinamen müssen mit der Nummer der Page anfangen.

Ich habe zuerst eine Info-Page erstellt, in dieser erhält der User einen Überblick über mein Projekt und meine verwendeten Daten.

Zum Einstieg habe ich zwei Balkendiagramme der Top-10 Songs und der Top-10 Künstler dargestellt. Um eine Interaktivität zu gewähren, wurde dem User eine Auswahl gegeben. Hier kann er seine Lieblingskünstler auswählen und es wird automatisch ein Pie-Chart erstellt, mit der Anzahl der Streams der ausgewählten Künstler. Das wurde mit einem Filtermechanismus umgesetzt, der den DataFrame nach den ausgewählten Künstlern filtert. Dazu habe ich eine If-Abfrage erstellt, um zu prüfen, ob der User mehr als 12 Künstler ausgewählt hat. Ist dies der Fall, dann wird eine Fehlermeldung angezeigt.

In der nächsten Page geht es um den Einfluss der Tonart und des Keys auf den Erfolg des Songs. Hier sind die beiden Diagramme, nach Tonart und nach Key zu sehen. In der Sidebar kann der User nach Tonart und nach Key filtern. Die Diagramme werden dabei automatisch angepasst. Das heißt, wenn der User als Filtermöglichkeit für die Tonart 'Major' wählt, dann wird in dem Tonartdiagramm nur Major angezeigt.  Das Keys-Diagramm passt sich dahingehend an, dass nur die durschnittlichen Streams nach Key für die jeweilige Tonart, in diesem Beispiel für 'Major' angezeigt werden. Dieser Vorgang läift gleich, wenn der User nach Keys filtert. Unten werden dem User abhängig von seiner Auswahl die Top-5 Songs nach Streams angezeigt. Dies wurde auch hier mit einem Filtermechanismus erschaffen.

Die nächste Page behandelt den Einfluss des Veröffentlichungsmonats. Hier habe ich nur einen kleinen Text und zwei Buttons implementiert. Wenn der User den Button ‚Diagrammdemo starten‘ klickt, wird eine schrittweise Demonstration eingeleitet. Wenn der User auf 'mehr Details anzeigen' klickt, dann werden ihm die Extrempunkte markiert und ein kleiner Text erscheint. Das wurde mit einer for-schleife erreicht. Nach jeder Iteration wird dem Dataframe ein Monat hinzugefügt. Um den Vorgang langsamer und somit anschaulicher zu gestalten, wurde die **Time** Bibliothek von Python benutzt: `time.sleep(0.25)`, damit wird eine viertel Sekunde gewartet, bis der nächste Monat zum DataFrame hinzugefügt wird.

In der nächsten Page wird der Einfluss von den Audio-Merkmalen auf die Songpopularität betrachtet. Hier werden vier verschiedene Scatter-Plots mit Regressionslinie gezeigt. Die betrachteten Merkmale sind hier Speechiness, Liveness, Instrumentalness und Accousticness. Hier kann der User in der Sidebar zwischen der Anzeige von Regressionslinie und Scatter-Plot, nur der Regressionslinie und nur dem Scatter-Plot wählen. Außerdem kann er die Y-Achse anpassen, ob sie nach den Streams oder nach der Anzahl der Songs misst.
Um diese Funktion zu ermöglichen, habe ich zwei Funktionen erstellt, eine erstellt dabei den Plot anhand der Anzahl der Songs, die Andere anhand der Anzahl der Streams. Beide haben die zwei Parameter 'merkmal' und 'anzeige'. Um die Charts nun konditionell anzeigen zu können, habe ich If-Statements genutzt.

Die nächste Page beschreibt, wie tanzbar und wie energetisch ein Song sein sollte. Diese ist etwas simpler gehalten. Hier kann der User in der Sidebar zwischen zwei Merkmalen wählen, der **Energy** und der **Danceability**. So wird der Distribution-Plot mit dem ausgewählten Merkmal angezeigt. Für die Umsetzung wurde mit einem einfachen If-Statement gearbeitet.

Die letzte inhaltlich relevante Page handelt von der Herkunft der Top-Künstler. Diese ist auch relativ simpel aufgebaut. Die Map zeigt die Anzahl der Künstler nach Ländern, in der Sidebar kann der User Länder auswählen. Wenn der User eine Auswahl trifft, dann werden nur diese Länder in der Map angezeigt und unten wird zusätzlich ein Barplot mit den ausgewählten Ländern nach Top-Künstlern erstellt. Um diese Funktionalität zu erreichen, wurde der Dataframe anhand von Eingaben in der Sidebar gefiltert.

Zuletzt wurde eine Kontaktpage erstellt. Hier findet der User meine Kontaktdaten.

Falls sie sich das Dashboard anschauen möchten, finden sie hier den Link:

- [Dashboard](https://appapp-ka7buefabvnokhdfwhyptg.streamlit.app/)

## Erstellung des Reports

Für die Erstellung des Reports habe ich die wichtigsten und aussagekräftigsten Graphen meines Projekts genutzt. Da die maximale Präsentationszeit bei 10 Minuten lag, musste ich mich in der Präsentation kurz halten und somit nur die wichtigsten Charts zeigen. Ich habe lediglich die beiden Graphen mit den Top-Künstlern und den Top-Songs weggelassen. Außerdem wurden für den Report die detaillierten (gelayerten) Charts verwendet. Diese habe ich mit Text versehen, um die wichtigsten Erkenntnisse meines Projekts nochmals klar darzustellen. Dazu habe ich über das jeweilige Diagramm einen kurzen Text, welcher erläutert, um was es in dem Graphen geht und was die Merkmale bedeuten, verfasst. Neben den Graphen wurden die Auffälligkeiten in ihnen erwähnt und unter ihnen eine Handlungsempfehlung.
Diese Erkenntnisse wurden am Ende nochmals als Formel zusammengefasst.

Hier finden sie den Report:

- [Report]()


