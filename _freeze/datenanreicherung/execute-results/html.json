{
  "hash": "feca091bcbf3b57f8a3fdb15abb9e863",
  "result": {
    "markdown": "# Datenanreicherung\n\nUm geografische Analysen durchzuführen und eine Map der Künstlerstandorte zu erstellen, wurde der Datensatz mit Informationen über die Länder der Künstler angereichert. Dieser Prozess nutzte die `musicbrainz` Bibliothek, um Zugriff auf die MusicBrainz-Datenbank zu erhalten. Mit dieser Datenbank konnnte ich anahnd des Künstlernamens das Herkunftsland der Künstler herausfinden.\n\n\n\n## Funktion zur Ermittlung des Künstlerlandes\nZuerst habe ich aus dem DataFrame der vorbereiteten Daten eine Liste der Künstlernamen extrahiert, die für die Abfragen nach Länderinformationen verwendet wurde. Dannach habe ich eine Funktion implementiert, um das Land eines Künstlers mit Hilfe der [MusicBrainz API](https://musicbrainz.org/) zu finden. Diese Funktion behandelt auch Fehler und Fälle, in denen kein Land gefunden wurde.\n\n\nDie Funktion `find_artist_country` dient dazu, das Land eines Künstlers zu ermitteln. Sie nutzt die [MusicBrainz API](https://musicbrainz.org/), um die notwendigen Informationen abzurufen. Die Funktion geht dabei wie folgt vor:\n\n1. **Setzen des User-Agent**: Zuerst wird ein User-Agent für die MusicBrainz API gesetzt. Dies ist notwendig, um die Anfragen an die API zu authentifizieren (Account ist notwendig).\n\n2. **Suchanfrage an MusicBrainz**: Die Funktion sucht nach dem übergebenen Künstlernamen.\n\n3. **Rückgabe des Landes**: Wenn ein Künstler gefunden wird, gibt die Funktion das Land des Künstlers zurück. Andernfalls wird `\"Artist not found\"` zurückgegeben.\n\n4. **Fehlerbehandlung**: Im Falle eines Fehlers bei der Anfrage oder der Verarbeitung der Daten wird eine Fehlermeldung zurückgegeben.\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\n\"\"\"\ndef find_artist_country(artist_name):\n    mb.set_useragent(\"Artist_Country\", \"1.0\", contact=\"me@example.com\")\n    try:\n        result = mb.search_artists(artist=artist_name, limit=1)\n        if result['artist-list']:\n            artist = result['artist-list'][0]\n            country = artist['area']['name']\n            return country\n        else:\n            return \"Artist not found\"\n    except Exception as e:\n        return f\"Error: {e}\"\n\n\"\"\"\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\n'\\ndef find_artist_country(artist_name):\\n    mb.set_useragent(\"Artist_Country\", \"1.0\", contact=\"me@example.com\")\\n    try:\\n        result = mb.search_artists(artist=artist_name, limit=1)\\n        if result[\\'artist-list\\']:\\n            artist = result[\\'artist-list\\'][0]\\n            country = artist[\\'area\\'][\\'name\\']\\n            return country\\n        else:\\n            return \"Artist not found\"\\n    except Exception as e:\\n        return f\"Error: {e}\"\\n\\n'\n```\n:::\n:::\n\n\n## Anreicherung des Datensatzes mit den Künstlerländern\n\nDer Datensatz wurde mit den Ländern der Künstler angereichert, indem die zuvor definierte Funktion verwendet wurde, um das Land für jeden Künstler abzufragen und dem DataFrame hinzuzufügen. Das ganze habe ich mit einer for-Schleife realisiert.\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\n\"\"\"\nartist_country_list = []\n\nfor artist in artist_list:\nartist_country_list.append(find_artist_country(artist))\n\ndf['artist_country'] = artist_country_list\n\n\"\"\"\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\n\"\\nartist_country_list = []\\n\\nfor artist in artist_list:\\nartist_country_list.append(find_artist_country(artist))\\n\\ndf['artist_country'] = artist_country_list\\n\\n\"\n```\n:::\n:::\n\n\nDa die Datenbank leider nicht alle Künstler kannte, kam es in manchen spalten zu Errors, diese habe ich im Anschluss entfernt.\n\n\n<br/>\n<br/>\n\n**Diese Datenanreicherung ermöglicht nun eine geografische Analyse der Künstlerstandorte und unterstützt die visuelle Darstellung der globalen Verteilung der Top-Künstler. Darauf basierend ist nun die Darstellung einer Map möglich.**\n\n",
    "supporting": [
      "datenanreicherung_files"
    ],
    "filters": [],
    "includes": {}
  }
}