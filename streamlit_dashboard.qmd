# Streamlit Dashboard

Um die Ergebnisse noch einmal detaillierter zu zeigen, und Interaktivität zu ermöglichen, habe ich ein Dashboard erstellt. Dafür wurde das Streamlit Framework verwendet. Dieses ermöglicht eine schnelle und ziemlich intuitive Erstellung eines Dashboards.

## Design, Aufbau und Beschreibung der Funktionalität

An dem Design musste ich nicht viel ändern, da ein Streamlit Dashboard von Haus aus meiner Meinung nach ziemlich gut aussieht. Ich habe in den meisten Fällen nur das 'layout' auf 'wide' gesetzt, um mehrere Visualisierungen nebeneinander darstellen zu können. Außerdem habe ich, wenn ich Charts in einem kurzen Text erklärt habe, diesen Text mit derselben Farbe des Diagrammtitels versehen.

Für den Aufbau des Dashboards habe ich eine Multipage-App gewählt, das geht in Streamlit ziemlich einfach, die verschiedenen Dateinamen müssen einfach mit der Nummer der Page anfangen.

Ich habe zuerst eine Info-Page erstellt, in dem der User einen Überblick über mein Projekt und meine verwendeten Daten bekommt.

Dann habe ich als kleinen Einstieg zwei Balkendiagramme der Top-10 Songs und der Top-10 Künstler dargestellt. Um eine Interaktivität zu gewähren habe ich dem User eine Auswahl gegeben, hier kann er seine Lieblingskünstler auswählen und es wird automatisch ein Pie-Chart erstellt, mit der Anzahl der Streams der jeweiligen Künstler. Das habe ich mit einem Filtermechanismus umgesetzt, der den DataFrame nach den ausgewählten Künstlern filtert und dann als Pie-Chart anzeigt. Dazu habe ich dann noch eine If-Abfrage erstellt, um zu checken, ob der User mehr als 12 ausgewählt hat, ist dies der Fall, dann wird eine Fehlermeldung angezeigt.

In der nächsten Page geht es um den Einfluss der Tonart und des Keys auf den Erfolg des Songs. Hier sind die beiden Diagramme, einmal nach Tonart und nach Key zu sehen. In der Sidebar kann der User nach Tonart und nach Key filtern. Die Diagramme werden dabei automatisch angepasst. Das heißt, wenn der User als Filtermöglichkeit für die Tonart 'Major' wählt, dann wird in dem Tonartdiagramm auch nur Major angezeigt und das Keys Diagramm passt sich auch dahingehend an, dass dann nur die Ø Streams nach Key für die jeweilige Tonart, in diesem Beispiel für 'Major' angezeigt. Das Ganze ist auch umgekehrt möglich. Unten werden dem User dann abhängig von seiner Auswahl die Top-5 Songs nach Streams angezeigt. Das Ganze wurde auch hier wieder mit einem Filtermechanismus erschaffen.

Die nächste Page behandelt den Einfluss des Veröffentlichungsmonats. Hier habe ich nur einen kleinen Text und 2 Buttons implementiert. Wenn der User den Button ‚Diagrammdemo starten‘ klickt, wird eine schrittweise Demonstration eingeleitet. Wenn der User auf 'mehr Details anzeigen' klickt, dann werden ihm die Extrempunkte markiert und ein kleiner Text erscheint. Das ganze habe ich mit einer for-schleife erreicht, nach jeder Iteration wird dem Dataframe ein Monat hinzugefügt, um das Ganze langsamer und somit anschaulicher zu gestalten habe ich die **Time** Bibliothek von Python benutzt: 'time.sleep(0.25)', damit wird eine viertel Sekunde gewartet, bis der nächste Monat zum DataFrame hinzugefügt wird.

In der nächsten Page wird der Einfluss von den Audio-Merkmalen auf die Songpopularität betrachtet. Hier werden vier verschiedene Scatter-Plots mit Regressionslinie gezeigt. Die betrachteten Merkmale sind hier Speechiness, Liveness, Instrumentalness und Accousticness. Hier kann der User wieder in der Sidebar zwischen der Anzeige von Regressionslinie und Scatter-Plot, nur der Regressionslinie und nur dem Scatter-Plot wählen. Außerdem kann er auch die Y-Achse anpassen, ob sie nach den Streams oder der Anzahl der Songs misst.
Um diese Funktion zu ermöglichen, habe ich zwei Funktionen erstellt, eine erstellt dabei den Plot anhand der Anzahl der Songs, die Andere anhand der Anzahl der Streams. Beide haben die zwei Parameter 'merkmal' und 'anzeige'. Um die Charts nun konditionell anzeigen zu können, habe ich If-Statements genutzt.

Die nächste Page beschreibt, wie tanzbar und wie energetisch ein Song sein sollte. Diese ist etwas simpler gehalten. Hier kann der User in der Sidebar zwischen zwei Merkmalen wählen, der **Energy** und der **Danceability**. So wird der Distribution-Plot mit dem ausgewählten Merkmal angezeigt. Für die Umsetzung wurde wieder mit einem einfachen If-Statement gearbeitet.

Die letzte inhaltlich relevante Page handelt sich um die Herkunft der Top-Künstler. Diese ist auch relativ simpel aufgebaut. Es ist die Map mit der Anzahl der Künstler nach Ländern zu sehen und in der Sidebar kann der User Länder auswählen. Wenn der User eine Auswahl trifft, dann werden nur diese Länder in der Map angezeigt und unten wird zusätzlich noch ein Barplot mit den ausgewählten Ländern nach Top-Künstler erstellt. Um diese Funktionalität zu erreichen, wurde der Dataframe anhand von den Eingaben in der Sidebar gefiltert.

Als Letztes habe ich noch eine Kontaktpage erstellt, hier kann der User meine Kontaktdaten finden.

Falls sie sich das Dashboard nochmal anschauen wollen, finden sie hier den Link:

- [Dashboard](https://appapp-ka7buefabvnokhdfwhyptg.streamlit.app/)


